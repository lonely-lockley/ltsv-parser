plugins {
    id 'java'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
    id "me.champeau.gradle.jmh" version "0.5.0-rc-2"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-core:3.0.0'
    jmh group: 'am.ik.ltsv4j', name: 'ltsv4j', version:'0.9.0'
    jmh group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.21'
}

artifacts {
    archives javadocJar, sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = project_name
                packaging = 'jar'
                description = project_description
                url = project_url
                scm {
                    connection = project_scm
                    developerConnection = project_scm
                    url = project_url
                }
                licenses {
                    license {
                        name = project_license_slug
                        url = project_license_url
                    }
                }
                developers {
                    developer {
                        id = project_developer
                        name = project_developer
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = version.endsWith('SNAPSHOT') ? snapshot_url : maven2_url
            credentials {
                username = System.getenv('SONATYPE_USERNAME')
                password = System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
}

signing {
    def signingKeyId = System.getenv('GPG_KEY_ID')
    if (!(signingKeyId == null) && !signingKeyId.isEmpty()) {
        project.ext."signing.keyId" = signingKeyId
        project.ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION')
        project.ext."signing.password" = System.getenv('GPG_PASSPHRASE')
        sign publishing.publications.mavenJava
    }
}

jmh {
    duplicateClassesStrategy = 'warn'
}